Jenkins Pipeline as Code

1. Declarative Pipeline
2. Scripted Pipeline

More about Pipeline Syntax: https://jenkins.io/doc/book/pipeline/syntax/

Declarative Pipeline syntax alwasys starts with the keyword "pipeline"
Scripted Pipeline syntax always starts with keyword "node"

We can still use "script block" inside Declarative Pipeline

Simple Hello World pipeline:

pipeline{
    agent any
    stages{
        stage("Hello"){
            steps{
                echo "Hello World"
            }
        }
    }
}

If we specify agent as "none" in the above pipeline example, then it will run on the Jenkins master

If we have a Jenkins slave node named "Slave 1", then we can specify label to run the pipeline on that slave

pipeline{
    agent{
        label "Slave 1"
    }
    stages{
        stage("Hello"){
            steps{
                echo "Hello World"
            }
        }
    }
}

This will run the pipeline on Jenkins slave named "Slave 1"


Custom Workspace:
We can specify a custom workspace for our pipeline by using customworkspace attribute of agent as in the below example...

pipeline{
    agent{
        label "Slave 1"
        customworkspace "/home/ec2-user/customworkspace"
    }
    stages{
        stage("Hello"){
            steps{
                echo "Hello World"
            }
        }
    }
}


Script Block:
We can use script block to run groovy scripts inside out declarative pipeline as below...

pipeline{
    agent any
    stages{
        stage('Build'){
            steps{
                script{
                    def name = "jesse"
                    
                    if(name == "jesse")
                        println("Hi ${name}")
                    else
                        println("Hi human")
                    
                    sleep 2
                    echo "end of script"
                }
            }
        }
    }
}

Here the "sleep" and "echo" steps in the above pipeline comes from "Workflow Basic Steps" plugin

More about Workflow Basic Steps: https://jenkins.io/doc/pipeline/steps/workflow-basic-steps/


Error, Retry and Timeout:

"retry" and "timeout" only apply to a block of code
"retry" and "timeout" can be used seperately or nested within each other as well.

Like "sleep" and "echo", "retry" and "timeout" are also provided by "Workflow Basic Steps" plugin

Retry:
======

pipeline{
    agent any
    stages{
        stage('Build'){
            steps{
                retry(3) {
                    echo "Before throwing error"
                    error "error in retry"
                }
                echo "end of script"
            }
        }
    }
}

Timeout:
========

pipeline{
    agent any
    stages{
        stage('Build'){
            steps{
                timeout(time: 1, unit: 'SECONDS'){
                    echo "Sleeping in timeout"
                    sleep 2
                }
            }
        }
    }
}

Here the sleep will be aborted due to timeout

Nested Retry and Timeout:
=========================

pipeline{
    agent any
    stages{
        stage('Build'){
            steps{
                retry(3) {
                    timeout(time: 1, unit: 'SECONDS'){
                        sleep 2
                    }
                    echo "After timeout"
                }
            }
        }
    }
}

Here the timeout block is retried three times and the pipeline is aborted, echo never executes

Tools:
======
A section in the pipeline defining tools to auto-install and put on the PATH
This instruction is ignored if agent is specified as none
We can add the tools section either under stage or directly under pipeline

Tools refered to by the tools section should already be available in Global Tool Configuration
Manage Jenkins => Global Tool Configuration

pipeline {
    agent any
    
    stages {
        stage('Build') {
            tools {
                maven 'maven3_5_2'
            }
            steps {
                sh 'mvn --version'
            }
        }
    }
}

If we had two different versions of maven installed,
then we can instruct the pipeline to use a specific version of maven by using the tools section


Error, Options, and Retry:
==========================

pipeline {
    agent any
    stages {
        stage('Build') {
            options {
                retry(3)
            }
            steps {
                echo "Before error statement"
                error "Error statement just got executed"
                echo "After error statement"
            }
        }
    }
}

This pipeline retries three times and aborts without printing "After error statement"

pipeline {
    agent any
    stages {
        stage('Build') {
            options {
                retry(3)
            }
            steps {
                echo "Before setting current build to FAILURE"
                script {
                    currentBuild.result = 'FAILURE'
                }
                echo "After setting the current build to FAILURE"
            }
        }
    }
}

This pipeline sets the current build to failure, and it does not retry
Also this pipeline prints "After setting the current build to FAILURE"


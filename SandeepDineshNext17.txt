Globally Scalable Microservices with GKE and Cloud Load Balancing:

11th September 2018

Meme Service:

MemeCreator: Stateles Microservice

dnsPolicy: ClusterFirst
restartPolicy: Always
securityContext: {}
terminationGracePeriodSeconds: 30


MongoDB Database: Stateful

MongoDB is NOT "Cloud Native": Unlike few other DBs, MongoDB can't handle node failure
PersistentVolumes: Data volume that persists even if the pod restarts or moves
Sidecar Container: A container that helps the primary container do its job
StatefulSets: Set of Pods that can scale horizontally with each Pod maintaining a consistent network and disk identity
Headless Service: A service that does not do load balancing, but exposes the Pods directly with DNS

https://github.com/thesandlord/mongo-k8s-sidecar

https://kubernetes.io/blog/2017/01/running-mongodb-on-kubernetes-with-statefulsets/


Multi-Cluster:

Federation Control Plane: Service that manages the global state of all federated clusters
kubefed: Command line tool that simplifies federation setup

$ kubectl --context=worldscalemicroservices get clusters
NAME                    STATUS    AGE
cluster-asia-east1-b    Ready     39s
cluster-europe-west1-d  Ready     39s
...
cluster-us-west1-a      Ready     39s

Here worldscalemicroservices is virtual federated context

kube-dns runs as a Pod inside the cluster


Multi-Cluster:
Federated Ingress: Native Kubernetes L7 Router
HTTP(s) Load Balancer: Global L7 Load Balancing with a single IP address and SSL offload


Ingress:

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: web
  annotations:
    kubernetes.io/ingress.global-static-ip-name: "kubernetes-ingress"
spec:
  backed:
    serviceName: web
    servicePort: 80


Cloud Storage Regional Buckets


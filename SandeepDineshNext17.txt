Globally Scalable Microservices with GKE and Cloud Load Balancing:

11th September 2018

Meme Service:

MemeCreator: Stateles Microservice

dnsPolicy: ClusterFirst
restartPolicy: Always
securityContext: {}
terminationGracePeriodSeconds: 30


MongoDB Database: Stateful

MongoDB is NOT "Cloud Native": Unlike few other DBs, MongoDB can't handle node failure
PersistentVolumes: Data volume that persists even if the pod restarts or moves
Sidecar Container: A container that helps the primary container do its job
StatefulSets: Set of Pods that can scale horizontally with each Pod maintaining a consistent network and disk identity
Headless Service: A service that does not do load balancing, but exposes the Pods directly with DNS

https://github.com/thesandlord/mongo-k8s-sidecar

https://kubernetes.io/blog/2017/01/running-mongodb-on-kubernetes-with-statefulsets/


Multi-Cluster:

Federation Control Plane: Service that manages the global state of all federated clusters
kubefed: Command line tool that simplifies federation setup

$ kubectl --context=worldscalemicroservices get clusters
NAME                    STATUS    AGE
cluster-asia-east1-b    Ready     39s
cluster-europe-west1-d  Ready     39s
...
cluster-us-west1-a      Ready     39s

Here worldscalemicroservices is virtual federated context

kube-dns runs as a Pod inside the cluster


Multi-Cluster:
Federated Ingress: Native Kubernetes L7 Router
HTTP(s) Load Balancer: Global L7 Load Balancing with a single IP address and SSL offload


Ingress:

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: web
  annotations:
    kubernetes.io/ingress.global-static-ip-name: "kubernetes-ingress"
spec:
  backed:
    serviceName: web
    servicePort: 80


Cloud Storage Regional Buckets

const bucket = process.env.BUCKETNAME

We can use a config map to store the regional buckets information that will then be exposed to the container as an environment variable or file

Secrets: similar to configmaps, but obfuscated. NOT ENCRYPTED
We can use vault to encrypt secrets

www.geoscreenshot.com -> get the geo location of a IP address

If we don't have a ConfigMap that a Deployment depends on,
Then the Deployment will be in PENDING state till the ConfigMap is created

apiVersion: v1
kind: ConfigMap
metadata:
  name: gcs
  namespace: default
data:
  bucketname: worldclassmicroservices-a-east

Microservices are more than code and infrastructure

Sync vs Async:
Synchronous (point-to-point) communication is easy to do, and Kubernetes makes it even easier.
This can be done RESTfully or with RPCs.
Either way, service discovery and support for these "synchronous" APIs feel native to Kubernetes

Async:
Pod 1 puts work in to a Work Queue, Pod 2 picks up work from Work Queue, and etc...

